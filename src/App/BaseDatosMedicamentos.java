package App;

import java.awt.Image;
import javax.swing.JOptionPane;
import java.sql.PreparedStatement;
import java.sql.Connection;
import javax.swing.table.DefaultTableModel;
import java.sql.Statement;
import java.sql.ResultSet;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableCellRenderer;
import java.awt.Toolkit;
import javax.swing.ImageIcon;

public class BaseDatosMedicamentos extends javax.swing.JFrame {

    public BaseDatosMedicamentos() {
        initComponents();
        //jlabel background
        Image background = new ImageIcon(this.getClass().getResource("/images/background3.jpg")).getImage();

        //bound get frame size
        JLabelBackground.setIcon(new ImageIcon(background));
        JLabelBackground.setBounds(0, 0, 910, 768);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        JscrollTablaBase = new javax.swing.JScrollPane();
        JTableBaseDatos = new javax.swing.JTable();
        JFilterCategory = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        JbuttonEliminar = new javax.swing.JButton();
        JbuttonEditar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        JlabelID = new javax.swing.JLabel();
        txtFieldCategoriaForm = new javax.swing.JTextField();
        txtFielNombreForm = new javax.swing.JTextField();
        JLabelBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Base de Datos");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/IconMediClass.png")));
        setPreferredSize(new java.awt.Dimension(910, 768));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 153, 153));
        jLabel1.setText("BASE DATOS MEDICAMENTOS ");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(274, 6, -1, 64));

        JTableBaseDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "ID", "Nombre", "Categoria"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JTableBaseDatos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JTableBaseDatosMouseClicked(evt);
            }
        });
        JscrollTablaBase.setViewportView(JTableBaseDatos);
        if (JTableBaseDatos.getColumnModel().getColumnCount() > 0) {
            JTableBaseDatos.getColumnModel().getColumn(0).setMinWidth(50);
            JTableBaseDatos.getColumnModel().getColumn(0).setPreferredWidth(100);
            JTableBaseDatos.getColumnModel().getColumn(0).setMaxWidth(100);
            JTableBaseDatos.getColumnModel().getColumn(2).setMinWidth(150);
            JTableBaseDatos.getColumnModel().getColumn(2).setPreferredWidth(300);
            JTableBaseDatos.getColumnModel().getColumn(2).setMaxWidth(300);
        }
        //style table
        JTableBaseDatos.getTableHeader().setFont(new java.awt.Font("Arial Black", 1, 14));
        JTableBaseDatos.getTableHeader().setForeground(new java.awt.Color(0, 153, 153));
        JTableBaseDatos.getTableHeader().setOpaque(false);
        JTableBaseDatos.getTableHeader().setBackground(new java.awt.Color(255, 255, 255));
        JTableBaseDatos.getTableHeader().setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 153)));
        JTableBaseDatos.setRowHeight(25);

        JTableBaseDatos.setFont(new java.awt.Font("Arial", 0, 14));
        JTableBaseDatos.setForeground(new java.awt.Color(51, 51, 51));
        JTableBaseDatos.setSelectionBackground(new java.awt.Color(0, 153, 153));
        JTableBaseDatos.setSelectionForeground(new java.awt.Color(255, 255, 255));
        JTableBaseDatos.setGridColor(new java.awt.Color(0, 153, 153));
        JTableBaseDatos.setShowVerticalLines(false);
        JTableBaseDatos.setShowHorizontalLines(false);
        JTableBaseDatos.setShowGrid(true);

        //center header table
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        JTableBaseDatos.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
        JTableBaseDatos.getColumnModel().getColumn(1).setCellRenderer( centerRenderer );
        JTableBaseDatos.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );

        //center table data

        DefaultTableCellRenderer leftRenderer = new DefaultTableCellRenderer();
        leftRenderer.setHorizontalAlignment( JLabel.LEFT );
        JTableBaseDatos.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
        JTableBaseDatos.getColumnModel().getColumn(1).setCellRenderer( leftRenderer );
        JTableBaseDatos.getColumnModel().getColumn(2).setCellRenderer( leftRenderer );

        getContentPane().add(JscrollTablaBase, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 120, 805, 460));

        JFilterCategory.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        JFilterCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todas" }));
        JFilterCategory.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                JFilterCategoryItemStateChanged(evt);
            }
        });
        getContentPane().add(JFilterCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 80, 191, 30));

        jLabel5.setBackground(new java.awt.Color(51, 51, 51));
        jLabel5.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(51, 51, 51));
        jLabel5.setText("Filtrar por categoria");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 60, 190, -1));

        JbuttonEliminar.setBackground(new java.awt.Color(255, 102, 102));
        JbuttonEliminar.setForeground(new java.awt.Color(255, 255, 255));
        JbuttonEliminar.setText("Eliminar");
        JbuttonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JbuttonEliminarActionPerformed(evt);
            }
        });
        getContentPane().add(JbuttonEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 690, 102, 38));

        JbuttonEditar.setBackground(new java.awt.Color(51, 51, 255));
        JbuttonEditar.setForeground(new java.awt.Color(255, 255, 255));
        JbuttonEditar.setText("Editar");
        JbuttonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JbuttonEditarActionPerformed(evt);
            }
        });
        getContentPane().add(JbuttonEditar, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 690, 106, 38));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setForeground(java.awt.SystemColor.textHighlight);
        jLabel2.setText("Nombre");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 600, -1, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setForeground(java.awt.SystemColor.textHighlight);
        jLabel3.setText("Categoria");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 600, -1, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setForeground(java.awt.SystemColor.textHighlight);
        jLabel4.setText("Id");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 630, 23, -1));

        JlabelID.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        JlabelID.setForeground(new java.awt.Color(51, 51, 51));
        getContentPane().add(JlabelID, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 600, -1, -1));

        txtFieldCategoriaForm.setBackground(new java.awt.Color(0, 153, 153));
        txtFieldCategoriaForm.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtFieldCategoriaForm.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(txtFieldCategoriaForm, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 630, 334, -1));

        txtFielNombreForm.setBackground(new java.awt.Color(0, 153, 153));
        txtFielNombreForm.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtFielNombreForm.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(txtFielNombreForm, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 630, 334, -1));
        getContentPane().add(JLabelBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 910, 768));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void JTableBaseDatosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JTableBaseDatosMouseClicked
        // TODO add your handling code here:
        int fila = JTableBaseDatos.rowAtPoint(evt.getPoint());

        if (fila > -1) {
            JlabelID.setText(JTableBaseDatos.getValueAt(fila, 0).toString());
            txtFielNombreForm.setText(JTableBaseDatos.getValueAt(fila, 1).toString());
            String categoria = JTableBaseDatos.getValueAt(fila, 2).toString();

            txtFieldCategoriaForm.setText(categoria);
        }

    }//GEN-LAST:event_JTableBaseDatosMouseClicked

    private void JbuttonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JbuttonEditarActionPerformed
        // TODO add your handling code here:
        if (txtFielNombreForm == null || txtFielNombreForm.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Debe ingresar un nombre");
        } else {
            String categoria = "";
            categoria = txtFieldCategoriaForm.getText();
            int id = Integer.parseInt(JlabelID.getText());
            String nombre = txtFielNombreForm.getText();
            String sql = "UPDATE medicamentos SET nombre = '" + nombre + "', categoria = '" + categoria + "' WHERE id = " + id;
            try {
                Connection con = conexion.getConexion();
                PreparedStatement ps = con.prepareStatement(sql);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Medicamento actualizado");
                limpiar();
                mostrarDatos();
                con.close();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        }
    }//GEN-LAST:event_JbuttonEditarActionPerformed

    private void JbuttonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JbuttonEliminarActionPerformed
        // TODO add your handling code here:
        int fila = JTableBaseDatos.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar una fila");
        } else {
            int id = Integer.parseInt(JlabelID.getText());
            String sql = "DELETE FROM medicamentos WHERE id = " + id;
            try {
                Connection con = conexion.getConexion();
                PreparedStatement ps = con.prepareStatement(sql);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Medicamento eliminado");
                limpiar();
                mostrarDatos();
                con.close();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        }


    }//GEN-LAST:event_JbuttonEliminarActionPerformed

    private void JFilterCategoryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_JFilterCategoryItemStateChanged
        // TODO add your handling code here:
        String categoria = JFilterCategory.getSelectedItem().toString();
        if (categoria.equals("Todas")) {
            mostrarDatos();
            
        } else {
            String sql = "SELECT * FROM medicamentos WHERE categoria = '" + categoria + "'";
            DefaultTableModel modelo = (DefaultTableModel) JTableBaseDatos.getModel();
            //limpiar tabla
            modelo.setRowCount(0);
            //obtener datos de la base de datos
            try {
                Connection con = conexion.getConexion();
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery(sql);
                while (rs.next()) {
                    Object[] fila = new Object[3];
                    fila[0] = rs.getInt("id");
                    fila[1] = rs.getString("nombre");
                    fila[2] = rs.getString("categoria");
                    modelo.addRow(fila);
                }
                con.close();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        }
    }//GEN-LAST:event_JFilterCategoryItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BaseDatosMedicamentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BaseDatosMedicamentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BaseDatosMedicamentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BaseDatosMedicamentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BaseDatosMedicamentos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JComboBox<String> JFilterCategory;
    private javax.swing.JLabel JLabelBackground;
    public javax.swing.JTable JTableBaseDatos;
    private javax.swing.JButton JbuttonEditar;
    private javax.swing.JButton JbuttonEliminar;
    private javax.swing.JLabel JlabelID;
    public javax.swing.JScrollPane JscrollTablaBase;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField txtFielNombreForm;
    private javax.swing.JTextField txtFieldCategoriaForm;
    // End of variables declaration//GEN-END:variables

    private void limpiar() {
        JlabelID.setText("");
        txtFielNombreForm.setText("");
        
    }

    private void mostrarDatos() {
        DefaultTableModel modelo = (DefaultTableModel) JTableBaseDatos.getModel();
        //limpiar tabla
        modelo.setRowCount(0);
        //obtener datos de la base de datos
        try {
            Connection con = conexion.getConexion();
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery("SELECT * FROM medicamentos");
            while (rs.next()) {
                Object[] fila = new Object[3];
                fila[0] = rs.getInt("id");
                fila[1] = rs.getString("nombre");
                fila[2] = rs.getString("categoria");
                modelo.addRow(fila);
            }

            con.close();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    private void cargarCategorias() {
        //si combo solo tiene Todas, agregar categorias
        try {
            Connection con = conexion.getConexion();
            Statement st = con.createStatement();
            if (JFilterCategory.getItemCount() == 1) {
                //obtener categorias de la base de datos
                ResultSet rs2 = st.executeQuery("SELECT DISTINCT categoria FROM medicamentos");
                while (rs2.next()) {
                    JFilterCategory.addItem(rs2.getString("categoria"));
                }
            } else if (JFilterCategory.getItemCount() > 1) {
                //si hay mas de una categoria, limpiar combo
                JFilterCategory.removeAllItems();
                JFilterCategory.addItem("Todas");
                //obtener categorias de la base de datos
                ResultSet rs2 = st.executeQuery("SELECT DISTINCT categoria FROM medicamentos");
                while (rs2.next()) {
                    JFilterCategory.addItem(rs2.getString("categoria"));
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }
}
