package App;

import java.awt.Image;
import javax.swing.JOptionPane;
import java.sql.PreparedStatement;
import java.sql.Connection;
import javax.swing.table.DefaultTableModel;
import java.sql.Statement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableCellRenderer;
import java.awt.Toolkit;
import java.io.FileNotFoundException;
import java.net.MalformedURLException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;

public class BaseRegistros extends javax.swing.JFrame {
    
    public ArrayList<Registro> list_registros = new ArrayList<>();
    public ArrayList<Integer> list_id_registros = new ArrayList<>();
    public Integer id_registro =0;
    
    
    public BaseRegistros() {
        initComponents();
        
        jDateChooserEnd.setDate(new Date());
        jDateChooserinit.setDate(new Date());

        mostrarDatos();
        //jlabel background
        Image background = new ImageIcon(this.getClass().getResource("/images/background3.jpg")).getImage();

        JLabelBackground.setIcon(new ImageIcon(background));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JlabelTitle = new javax.swing.JLabel();
        JscrollTablaBase = new javax.swing.JScrollPane();
        JTableBaseDatos = new javax.swing.JTable();
        Jlabel_filter = new javax.swing.JLabel();
        JbuttonEliminar = new javax.swing.JButton();
        JlabelID = new javax.swing.JLabel();
        Jlabel_filter1 = new javax.swing.JLabel();
        Jlabel_filter2 = new javax.swing.JLabel();
        Jlabel_filter3 = new javax.swing.JLabel();
        jDateChooserEnd = new com.toedter.calendar.JDateChooser();
        jDateChooserinit = new com.toedter.calendar.JDateChooser();
        jButtonAplicarFiltro = new javax.swing.JButton();
        JbuttonEditar = new javax.swing.JButton();
        JBusqueda_Paciente = new javax.swing.JTextField();
        JLabelBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Base de Registros");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/IconMediClass.png")));
        setMinimumSize(new java.awt.Dimension(1366, 750));
        setPreferredSize(new java.awt.Dimension(1366, 750));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JlabelTitle.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        JlabelTitle.setForeground(java.awt.SystemColor.textHighlight);
        JlabelTitle.setText("BASE DE REGISTROS");
        getContentPane().add(JlabelTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 0, -1, 57));

        JTableBaseDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Fecha", "Paciente", "Doctor", "Enfermero"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JTableBaseDatos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JTableBaseDatosMouseClicked(evt);
            }
        });
        JscrollTablaBase.setViewportView(JTableBaseDatos);
        if (JTableBaseDatos.getColumnModel().getColumnCount() > 0) {
            JTableBaseDatos.getColumnModel().getColumn(0).setMinWidth(50);
            JTableBaseDatos.getColumnModel().getColumn(0).setPreferredWidth(100);
            JTableBaseDatos.getColumnModel().getColumn(0).setMaxWidth(100);
            JTableBaseDatos.getColumnModel().getColumn(1).setMinWidth(150);
            JTableBaseDatos.getColumnModel().getColumn(1).setPreferredWidth(150);
            JTableBaseDatos.getColumnModel().getColumn(1).setMaxWidth(250);
        }
        //style table
        JTableBaseDatos.getTableHeader().setFont(new java.awt.Font("Arial Black", 1, 14));
        JTableBaseDatos.getTableHeader().setForeground(new java.awt.Color(0, 153, 153));
        JTableBaseDatos.getTableHeader().setOpaque(false);
        JTableBaseDatos.getTableHeader().setBackground(new java.awt.Color(255, 255, 255));
        JTableBaseDatos.getTableHeader().setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 153)));
        JTableBaseDatos.setRowHeight(25);

        JTableBaseDatos.setFont(new java.awt.Font("Arial", 0, 14));
        JTableBaseDatos.setForeground(new java.awt.Color(51, 51, 51));
        JTableBaseDatos.setSelectionBackground(new java.awt.Color(0, 153, 153));
        JTableBaseDatos.setSelectionForeground(new java.awt.Color(255, 255, 255));
        JTableBaseDatos.setGridColor(new java.awt.Color(0, 153, 153));
        JTableBaseDatos.setShowVerticalLines(false);
        JTableBaseDatos.setShowHorizontalLines(false);
        JTableBaseDatos.setShowGrid(true);

        //center header table
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        JTableBaseDatos.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
        JTableBaseDatos.getColumnModel().getColumn(1).setCellRenderer( centerRenderer );
        JTableBaseDatos.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
        JTableBaseDatos.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
        JTableBaseDatos.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );
        //center table data

        DefaultTableCellRenderer leftRenderer = new DefaultTableCellRenderer();
        leftRenderer.setHorizontalAlignment( JLabel.LEFT );
        JTableBaseDatos.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
        JTableBaseDatos.getColumnModel().getColumn(1).setCellRenderer( centerRenderer );
        JTableBaseDatos.getColumnModel().getColumn(2).setCellRenderer( leftRenderer );
        JTableBaseDatos.getColumnModel().getColumn(3).setCellRenderer( leftRenderer );
        JTableBaseDatos.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );

        getContentPane().add(JscrollTablaBase, new org.netbeans.lib.awtextra.AbsoluteConstraints(76, 180, 1230, 457));

        Jlabel_filter.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        Jlabel_filter.setText("Buscar por paciente");
        getContentPane().add(Jlabel_filter, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 80, 160, -1));

        JbuttonEliminar.setBackground(new java.awt.Color(255, 102, 102));
        JbuttonEliminar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        JbuttonEliminar.setForeground(new java.awt.Color(255, 255, 255));
        JbuttonEliminar.setText("Eliminar");
        JbuttonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JbuttonEliminarActionPerformed(evt);
            }
        });
        getContentPane().add(JbuttonEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1190, 660, 102, 50));

        JlabelID.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        JlabelID.setForeground(java.awt.SystemColor.textHighlight);
        getContentPane().add(JlabelID, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 650, 110, 28));

        Jlabel_filter1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        Jlabel_filter1.setText("Filtrar por fecha");
        getContentPane().add(Jlabel_filter1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 80, 116, -1));

        Jlabel_filter2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        Jlabel_filter2.setText("A");
        getContentPane().add(Jlabel_filter2, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 110, 16, -1));

        Jlabel_filter3.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        getContentPane().add(Jlabel_filter3, new org.netbeans.lib.awtextra.AbsoluteConstraints(557, 105, 36, -1));
        getContentPane().add(jDateChooserEnd, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 110, 136, -1));

        jDateChooserinit.setToolTipText("Seleccione la fecha de inicio");
        getContentPane().add(jDateChooserinit, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 110, 136, -1));

        jButtonAplicarFiltro.setBackground(new java.awt.Color(0, 102, 153));
        jButtonAplicarFiltro.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButtonAplicarFiltro.setForeground(new java.awt.Color(255, 255, 255));
        jButtonAplicarFiltro.setText("Buscar");
        jButtonAplicarFiltro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonAplicarFiltroMouseClicked(evt);
            }
        });
        getContentPane().add(jButtonAplicarFiltro, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 110, 85, 24));

        JbuttonEditar.setBackground(new java.awt.Color(51, 51, 255));
        JbuttonEditar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        JbuttonEditar.setForeground(new java.awt.Color(255, 255, 255));
        JbuttonEditar.setText("Imprimir");
        JbuttonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JbuttonImprimirActionPerformed(evt);
            }
        });
        getContentPane().add(JbuttonEditar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1010, 660, 106, 50));

        JBusqueda_Paciente.setBackground(new java.awt.Color(0, 51, 153));
        JBusqueda_Paciente.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        JBusqueda_Paciente.setForeground(new java.awt.Color(255, 255, 255));
        JBusqueda_Paciente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                JBusqueda_PacienteKeyReleased(evt);
            }
        });
        getContentPane().add(JBusqueda_Paciente, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 110, 340, 30));
        getContentPane().add(JLabelBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1366, 750));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void JTableBaseDatosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JTableBaseDatosMouseClicked
        // TODO add your handling code here:
        int fila = JTableBaseDatos.rowAtPoint(evt.getPoint());

        if (fila > -1) {
            id_registro = Integer.valueOf(JTableBaseDatos.getValueAt(fila, 0).toString());
        }

    }//GEN-LAST:event_JTableBaseDatosMouseClicked

    private void JbuttonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JbuttonEliminarActionPerformed
        // TODO add your handling code here:

        // mostrar mensaje de confirmacion para eliminar registro
        if (JOptionPane.showConfirmDialog(null, "¿Desea eliminar el registro seleccionado?", "eliminar registro", JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION) {
            return;
        }
      
        int fila = JTableBaseDatos.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar una fila");
        } else {
            int id = Integer.parseInt(JTableBaseDatos.getValueAt(fila, 0).toString());

            // comprobar si en detalle_registro hay detalles asociados al registro y eliminarlos antes de eliminar el registro
            try {
                Connection con = conexion.getConexion();
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery("SELECT id_detalle_registro FROM detalle_registro WHERE id_registro = " + id);
                ArrayList<Integer> ids_detalle = new ArrayList<>();
                while (rs.next()) {
                    ids_detalle.add(rs.getInt("id_detalle_registro"));
                }
                con.close();
                // eliminar detalles
                for (Integer id_detalle : ids_detalle) {
                    try {
                        Connection con2 = conexion.getConexion();
                        PreparedStatement ps = con2.prepareStatement("DELETE FROM detalle_registro WHERE id_detalle_registro = " + id_detalle);
                        ps.executeUpdate();
                        con2.close();
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, ex);
                    }
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex);
            }

            // eliminar registro

            try {
                Connection con = conexion.getConexion();
                PreparedStatement ps = con.prepareStatement("DELETE FROM registro WHERE id = " + id);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Registro eliminado");
                limpiar();
                mostrarDatos();
                //actualizarCategorias();
                con.close();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        }


    }//GEN-LAST:event_JbuttonEliminarActionPerformed

    private void jButtonAplicarFiltroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonAplicarFiltroMouseClicked
        // TODO add your handling code here:
        mostrarDatos();

    }//GEN-LAST:event_jButtonAplicarFiltroMouseClicked

    private void JbuttonImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JbuttonImprimirActionPerformed
        // TODO add your handling code here:
        Registro registro = new Registro(id_registro);
        try {
            registro.imprimir();
        } catch (FileNotFoundException | MalformedURLException ex) {
            Logger.getLogger(BaseRegistros.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_JbuttonImprimirActionPerformed

    private void JBusqueda_PacienteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JBusqueda_PacienteKeyReleased
        // TODO add your handling code here:
        mostrarDatos();
        
    }//GEN-LAST:event_JBusqueda_PacienteKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BaseRegistros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BaseRegistros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BaseRegistros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BaseRegistros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BaseRegistros().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField JBusqueda_Paciente;
    private javax.swing.JLabel JLabelBackground;
    public javax.swing.JTable JTableBaseDatos;
    private javax.swing.JButton JbuttonEditar;
    private javax.swing.JButton JbuttonEliminar;
    private javax.swing.JLabel JlabelID;
    private javax.swing.JLabel JlabelTitle;
    private javax.swing.JLabel Jlabel_filter;
    private javax.swing.JLabel Jlabel_filter1;
    private javax.swing.JLabel Jlabel_filter2;
    private javax.swing.JLabel Jlabel_filter3;
    public javax.swing.JScrollPane JscrollTablaBase;
    private javax.swing.JButton jButtonAplicarFiltro;
    private com.toedter.calendar.JDateChooser jDateChooserEnd;
    private com.toedter.calendar.JDateChooser jDateChooserinit;
    // End of variables declaration//GEN-END:variables

    private void limpiar() {
        JlabelID.setText("");
    }

    private void mostrarDatos() {
        DefaultTableModel modelo = (DefaultTableModel) JTableBaseDatos.getModel();
        //limpiar tabla
        modelo.setRowCount(0);
        getInfoRegistros();

        // agregar datos a la tabla de registros= id | fecha | paciente | doctor | enfermero
        for (Registro registro : list_registros) {
            Object[] fila = new Object[5];
            fila[0] = registro.id;
            // fila[1] = registro.fecha;
            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
            fila[1] = sdf.format(registro.fecha);
            fila[2] = registro.nombre_paciente;
            fila[3] = registro.nombre_doctor;
            fila[4] = registro.nombre_enfermero;
            modelo.addRow(fila);
        }

    }
    private void actualizarmesRegistroenBaseDatos(String idInico, String idFin) {
        //update mes de registro en base de datos
        try {
            Connection con = conexion.getConexion();
            Statement st = con.createStatement();
            String sql = "UPDATE registro SET fecha = DATE_ADD('fecha', INTERVAL -1 MONTH) WHERE id BETWEEN " + idInico + " AND " + idFin + ";";
            st.executeUpdate(sql);
            con.close();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }

    }

    private void getInfoRegistros() {
        String fechaInicio = "";
        String fechaFin = "";
        java.sql.Date fechaInitSql = null;
        java.sql.Date fechaFinSql = null;

        if (jDateChooserinit.getDate() != null && jDateChooserEnd.getDate() != null) {
            fechaInicio = jDateChooserinit.getDate().toString();
            fechaFin = jDateChooserEnd.getDate().toString();

            Date fechaInit = jDateChooserinit.getDate();
            long d = fechaInit.getTime();
            fechaInitSql = new java.sql.Date(d);

            Date fechaEnd = jDateChooserEnd.getDate();
            long d2 = fechaEnd.getTime();
            fechaFinSql = new java.sql.Date(d2);

            // validar que la fecha de inicio sea menor o igual a la fecha de fin
            //  fechas iguales si deben poder operarse, mostro el mensaje y no deberia si son iguales
            if (fechaInitSql.compareTo(fechaFinSql) > 1) {
                JOptionPane.showMessageDialog(null, "La fecha de inicio debe ser menor o igual a la fecha de fin");
                return;
            }
        }
        String paciente = JBusqueda_Paciente.getText();

        // obtener registros con filtro de fecha y donde el paciente sea parecido a lo ingresado en el campo de busqueda 
        try {
            Connection con = conexion.getConexion();
            PreparedStatement ps;
            String sql = "SELECT registro.id, registro.fecha, pacientes.nombre AS nombre_paciente, doctores.nombre AS nombre_doctor, enfermeros.nombre AS nombre_enfermero FROM registro LEFT JOIN pacientes ON registro.id_paciente = pacientes.id_paciente LEFT JOIN doctores ON registro.id_doctor = doctores.id_doctor LEFT JOIN enfermeros ON registro.id_enfermero = enfermeros.id_enfermero WHERE 1=1";

            if (!fechaInicio.equals("") && !fechaFin.equals("")) {
                sql += " AND registro.fecha BETWEEN ? AND ?";
            }

            if (!paciente.equals("")) {
                sql += " AND pacientes.nombre LIKE ?";
            }

            ps = con.prepareStatement(sql);

            int paramIndex = 1;

            if (!fechaInicio.equals("") && !fechaFin.equals("")) {
                ps.setDate(paramIndex++, fechaInitSql);
                ps.setDate(paramIndex++, fechaFinSql);
            }

            if (!paciente.equals("")) {
                ps.setString(paramIndex++, "%" + paciente + "%");
            }

            ResultSet rs = ps.executeQuery();
            list_registros.clear();
            while (rs.next()) {
                Registro registro = new Registro(rs.getInt("id"));
                list_registros.add(registro);
            }
            con.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex);
        }

        sortById();
    }

    private void sortById() {
        // ordenar registros por id
        list_registros.sort((r1, r2) -> r1.id - r2.id);
    }


}
