package App;

import javax.swing.JOptionPane;
import java.sql.PreparedStatement;
import java.sql.Connection;
import javax.swing.table.DefaultTableModel;
import java.sql.Statement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableCellRenderer;
import java.awt.Toolkit;

public class BaseRegistros extends javax.swing.JFrame {

    public BaseRegistros() {
        initComponents();
        mostrarDatos();
        actualizarCategorias();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JlabelTitle = new javax.swing.JLabel();
        JscrollTablaBase = new javax.swing.JScrollPane();
        JTableBaseDatos = new javax.swing.JTable();
        JFilterCategory = new javax.swing.JComboBox<>();
        Jlabel_filter = new javax.swing.JLabel();
        JbuttonEliminar = new javax.swing.JButton();
        JlabelID = new javax.swing.JLabel();
        JlabelFecha = new javax.swing.JLabel();
        JlabelData = new javax.swing.JLabel();
        Jlabel_filter1 = new javax.swing.JLabel();
        Jlabel_filter2 = new javax.swing.JLabel();
        Jlabel_filter3 = new javax.swing.JLabel();
        jDateChooserEnd = new com.toedter.calendar.JDateChooser();
        jDateChooserinit = new com.toedter.calendar.JDateChooser();
        jButtonAplicarFiltro = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Base de Registros");
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/IconMediClass.png")));

        JlabelTitle.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        JlabelTitle.setForeground(new java.awt.Color(0, 153, 153));
        JlabelTitle.setText("BASE DE REGISTROS");

        JTableBaseDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Fecha", "Nombre", "Categoria", "Cantidad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JTableBaseDatos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JTableBaseDatosMouseClicked(evt);
            }
        });
        JscrollTablaBase.setViewportView(JTableBaseDatos);
        if (JTableBaseDatos.getColumnModel().getColumnCount() > 0) {
            JTableBaseDatos.getColumnModel().getColumn(0).setMinWidth(50);
            JTableBaseDatos.getColumnModel().getColumn(0).setPreferredWidth(100);
            JTableBaseDatos.getColumnModel().getColumn(0).setMaxWidth(100);
            JTableBaseDatos.getColumnModel().getColumn(4).setMinWidth(50);
            JTableBaseDatos.getColumnModel().getColumn(4).setPreferredWidth(150);
            JTableBaseDatos.getColumnModel().getColumn(4).setMaxWidth(150);
        }
        //style table
        JTableBaseDatos.getTableHeader().setFont(new java.awt.Font("Arial Black", 1, 14));
        JTableBaseDatos.getTableHeader().setForeground(new java.awt.Color(0, 153, 153));
        JTableBaseDatos.getTableHeader().setOpaque(false);
        JTableBaseDatos.getTableHeader().setBackground(new java.awt.Color(255, 255, 255));
        JTableBaseDatos.getTableHeader().setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 153)));
        JTableBaseDatos.setRowHeight(25);

        JTableBaseDatos.setFont(new java.awt.Font("Arial", 0, 14));
        JTableBaseDatos.setForeground(new java.awt.Color(51, 51, 51));
        JTableBaseDatos.setSelectionBackground(new java.awt.Color(0, 153, 153));
        JTableBaseDatos.setSelectionForeground(new java.awt.Color(255, 255, 255));
        JTableBaseDatos.setGridColor(new java.awt.Color(0, 153, 153));
        JTableBaseDatos.setShowVerticalLines(false);
        JTableBaseDatos.setShowHorizontalLines(false);
        JTableBaseDatos.setShowGrid(true);

        //center header table
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment( JLabel.CENTER );
        JTableBaseDatos.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
        JTableBaseDatos.getColumnModel().getColumn(1).setCellRenderer( centerRenderer );
        JTableBaseDatos.getColumnModel().getColumn(2).setCellRenderer( centerRenderer );
        JTableBaseDatos.getColumnModel().getColumn(3).setCellRenderer( centerRenderer );
        JTableBaseDatos.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );
        //center table data

        DefaultTableCellRenderer leftRenderer = new DefaultTableCellRenderer();
        leftRenderer.setHorizontalAlignment( JLabel.LEFT );
        JTableBaseDatos.getColumnModel().getColumn(0).setCellRenderer( centerRenderer );
        JTableBaseDatos.getColumnModel().getColumn(1).setCellRenderer( centerRenderer );
        JTableBaseDatos.getColumnModel().getColumn(2).setCellRenderer( leftRenderer );
        JTableBaseDatos.getColumnModel().getColumn(3).setCellRenderer( leftRenderer );
        JTableBaseDatos.getColumnModel().getColumn(4).setCellRenderer( centerRenderer );

        JFilterCategory.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                JFilterCategoryItemStateChanged(evt);
            }
        });

        Jlabel_filter.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        Jlabel_filter.setText("Filtrar por categoria");

        JbuttonEliminar.setBackground(new java.awt.Color(255, 102, 102));
        JbuttonEliminar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        JbuttonEliminar.setForeground(new java.awt.Color(255, 255, 255));
        JbuttonEliminar.setText("Eliminar");
        JbuttonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JbuttonEliminarActionPerformed(evt);
            }
        });

        JlabelID.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        JlabelID.setForeground(new java.awt.Color(0, 153, 153));

        JlabelFecha.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        JlabelFecha.setForeground(new java.awt.Color(0, 153, 153));
        JlabelFecha.setText("Fecha registro");

        JlabelData.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        JlabelData.setForeground(new java.awt.Color(0, 153, 153));
        JlabelData.setText("Nombre Medicamento");

        Jlabel_filter1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        Jlabel_filter1.setText("Filtrar por fecha");

        Jlabel_filter2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        Jlabel_filter2.setText("A");

        Jlabel_filter3.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

        jDateChooserinit.setToolTipText("Seleccione la fecha de inicio");

        jButtonAplicarFiltro.setBackground(new java.awt.Color(0, 102, 153));
        jButtonAplicarFiltro.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jButtonAplicarFiltro.setForeground(new java.awt.Color(255, 255, 255));
        jButtonAplicarFiltro.setText("Aplicar");
        jButtonAplicarFiltro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonAplicarFiltroMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(153, 153, 153)
                        .addComponent(JlabelFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(119, 119, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(JscrollTablaBase, javax.swing.GroupLayout.PREFERRED_SIZE, 805, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jDateChooserinit, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Jlabel_filter2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(215, 215, 215)
                                        .addComponent(Jlabel_filter3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jDateChooserEnd, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jButtonAplicarFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(JlabelTitle)
                                .addGap(289, 289, 289))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(JlabelID, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(JlabelData, javax.swing.GroupLayout.PREFERRED_SIZE, 630, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(JbuttonEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(Jlabel_filter1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(JFilterCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Jlabel_filter, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(102, 102, 102)))))
                .addGap(92, 92, 92))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JlabelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(Jlabel_filter))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addComponent(Jlabel_filter1)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(JFilterCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonAplicarFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Jlabel_filter3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jDateChooserinit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jDateChooserEnd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Jlabel_filter2)))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(JscrollTablaBase, javax.swing.GroupLayout.PREFERRED_SIZE, 666, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(JlabelFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(JlabelData, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(JbuttonEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(JlabelID, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47))))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void JTableBaseDatosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JTableBaseDatosMouseClicked
        // TODO add your handling code here:
        int fila = JTableBaseDatos.rowAtPoint(evt.getPoint());

        if (fila > -1) {
            JlabelID.setText(JTableBaseDatos.getValueAt(fila, 0).toString());

            //fecha
            JlabelFecha.setText("Fecha : " + JTableBaseDatos.getValueAt(fila, 1).toString());
            //nombre categoria cantidad
            String nombre = JTableBaseDatos.getValueAt(fila, 2).toString();
            String categoria = JTableBaseDatos.getValueAt(fila, 3).toString();
            String cantidad = JTableBaseDatos.getValueAt(fila, 4).toString();
            JlabelData.setText("Nombre : " + nombre + " Categoria : " + categoria + " Cantidad : " + cantidad);
        }

    }//GEN-LAST:event_JTableBaseDatosMouseClicked

    private void JbuttonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JbuttonEliminarActionPerformed
        // TODO add your handling code here:
        int fila = JTableBaseDatos.getSelectedRow();
        if (fila == -1) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar una fila");
        } else {
            int id = Integer.parseInt(JlabelID.getText());
            String sql = "DELETE FROM registro WHERE id = " + id;
            try {
                Connection con = conexion.getConexion();
                PreparedStatement ps = con.prepareStatement(sql);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Registro eliminado");
                limpiar();
                mostrarDatos();
                //actualizarCategorias();
                con.close();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        }


    }//GEN-LAST:event_JbuttonEliminarActionPerformed

    private void JFilterCategoryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_JFilterCategoryItemStateChanged
        // TODO add your handling code here:
        String categoria = JFilterCategory.getSelectedItem().toString();
        if (categoria.equals("Todas")) {
            mostrarDatos();
        } else {
            String sql = "";
            if (jDateChooserinit.getDate() != null && jDateChooserEnd.getDate() != null) {
                String fechaInicio = jDateChooserinit.getDate().toString();
                String fechaFin = jDateChooserEnd.getDate().toString();

                Date fechaInit = jDateChooserinit.getDate();
                long d = fechaInit.getTime();
                java.sql.Date fechaInicioSql = new java.sql.Date(d);

                Date fechaEnd = jDateChooserEnd.getDate();
                long d2 = fechaEnd.getTime();
                java.sql.Date fechaFinSql = new java.sql.Date(d2);
                sql =  "SELECT * FROM registro WHERE categoria = '" + categoria + "' AND fecha BETWEEN '" + fechaInicioSql + "' AND '" + fechaFinSql + "'";
            } else {
                sql = "SELECT * FROM registro WHERE categoria = '" + categoria + "'";
            }

            DefaultTableModel modelo = (DefaultTableModel) JTableBaseDatos.getModel();
            //limpiar tabla
            modelo.setRowCount(0);
            //obtener datos de la base de datos
            try {
                Connection con = conexion.getConexion();
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery(sql);
                while (rs.next()) {
                    Object[] fila = new Object[5];
                    fila[0] = rs.getInt("id");

                    //date fecha to string
                    Date fecha = rs.getDate("fecha");
                    SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                    String fechaString = formato.format(fecha);
                    fila[1] = fechaString;

                    fila[2] = rs.getString("nombre");
                    fila[3] = rs.getString("categoria");
                    fila[4] = rs.getInt("cantidad");
                    modelo.addRow(fila);
                }
                con.close();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        }
    }//GEN-LAST:event_JFilterCategoryItemStateChanged

    private void jButtonAplicarFiltroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonAplicarFiltroMouseClicked
        // TODO add your handling code here:
        String fechaInicio = "";
        String fechaFin = "";
        java.sql.Date fechaInicioSql = null;
        java.sql.Date fechaFinSql = null;
        //si jdatechooser no esta vacio
        if (jDateChooserinit.getDate() != null && jDateChooserEnd.getDate() != null) {

            fechaInicio = jDateChooserinit.getDate().toString();
            fechaFin = jDateChooserEnd.getDate().toString();

            Date fechaInit = jDateChooserinit.getDate();
            long d = fechaInit.getTime();
            fechaInicioSql = new java.sql.Date(d);

            Date fechaEnd = jDateChooserEnd.getDate();
            long d2 = fechaEnd.getTime();
            fechaFinSql = new java.sql.Date(d2);
        }
        //si alguna de las dos fechas esta vacio
        if (fechaInicio.equals("") || fechaFin.equals("")) {
            mostrarDatos();
            return;
        }
        //if categoria is all
        if (JFilterCategory.getSelectedItem().toString().equals("Todas")) {
            String sql = "SELECT * FROM registro WHERE fecha BETWEEN '" + fechaInicioSql + "' AND '" + fechaFinSql + "';";
            DefaultTableModel modelo = (DefaultTableModel) JTableBaseDatos.getModel();
            //limpiar tabla
            modelo.setRowCount(0);
            //obtener datos de la base de datos
            try {
                Connection con = conexion.getConexion();
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery(sql);
                while (rs.next()) {
                    Object[] fila = new Object[5];
                    fila[0] = rs.getInt("id");

                    //date fecha to string
                    Date fecha = rs.getDate("fecha");
                    SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                    String fechaString = formato.format(fecha);
                    fila[1] = fechaString;

                    fila[2] = rs.getString("nombre");
                    fila[3] = rs.getString("categoria");
                    fila[4] = rs.getInt("cantidad");
                    modelo.addRow(fila);
                }
                con.close();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        } else {
            String categoria = JFilterCategory.getSelectedItem().toString();
            String sql = "SELECT * FROM registro WHERE fecha BETWEEN '" + fechaInicio + "' AND '" + fechaFin + "' AND categoria = '" + categoria + "';";
            DefaultTableModel modelo = (DefaultTableModel) JTableBaseDatos.getModel();
            //limpiar tabla
            modelo.setRowCount(0);
            //obtener datos de la base de datos
            try {
                Connection con = conexion.getConexion();
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery(sql);
                while (rs.next()) {
                    Object[] fila = new Object[5];
                    fila[0] = rs.getInt("id");

                    //date fecha to string
                    Date fecha = rs.getDate("fecha");
                    SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                    String fechaString = formato.format(fecha);
                    fila[1] = fechaString;

                    fila[2] = rs.getString("nombre");
                    fila[3] = rs.getString("categoria");
                    fila[4] = rs.getInt("cantidad");
                    modelo.addRow(fila);
                }
                con.close();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex);
            }
        }


    }//GEN-LAST:event_jButtonAplicarFiltroMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BaseRegistros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BaseRegistros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BaseRegistros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BaseRegistros.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BaseRegistros().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JComboBox<String> JFilterCategory;
    public javax.swing.JTable JTableBaseDatos;
    private javax.swing.JButton JbuttonEliminar;
    private javax.swing.JLabel JlabelData;
    private javax.swing.JLabel JlabelFecha;
    private javax.swing.JLabel JlabelID;
    private javax.swing.JLabel JlabelTitle;
    private javax.swing.JLabel Jlabel_filter;
    private javax.swing.JLabel Jlabel_filter1;
    private javax.swing.JLabel Jlabel_filter2;
    private javax.swing.JLabel Jlabel_filter3;
    public javax.swing.JScrollPane JscrollTablaBase;
    private javax.swing.JButton jButtonAplicarFiltro;
    private com.toedter.calendar.JDateChooser jDateChooserEnd;
    private com.toedter.calendar.JDateChooser jDateChooserinit;
    // End of variables declaration//GEN-END:variables

    private void limpiar() {
        JlabelID.setText("");
        JlabelFecha.setText("");
        JlabelData.setText("");
    }

    private void mostrarDatos() {
        DefaultTableModel modelo = (DefaultTableModel) JTableBaseDatos.getModel();
        //limpiar tabla
        modelo.setRowCount(0);
        //obtener datos de la base de datos
        try {
            Connection con = conexion.getConexion();
            Statement st = con.createStatement();
            String sql = "";

            if (jDateChooserinit.getDate() != null && jDateChooserEnd.getDate() != null) {
                Date fechaInit = jDateChooserinit.getDate();
                long d = fechaInit.getTime();
                java.sql.Date fechaInicioSql = new java.sql.Date(d);

                Date fechaEnd = jDateChooserEnd.getDate();
                long d2 = fechaEnd.getTime();
                java.sql.Date fechaFinSql = new java.sql.Date(d2);
                sql = "SELECT * FROM registro WHERE fecha BETWEEN '" + fechaInicioSql + "' AND '" + fechaFinSql + "'";
            }else {
                sql = "SELECT * FROM registro";
            }

            ResultSet rs = st.executeQuery(sql);
            while (rs.next()) {
                Object[] fila = new Object[5];
                fila[0] = rs.getInt("id");
                //date fecha to string
                Date fecha = rs.getDate("fecha");
                SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy");
                String fechaString = formato.format(fecha);
                fila[1] = fechaString;
                fila[2] = rs.getString("nombre");
                fila[3] = rs.getString("categoria");
                fila[4] = rs.getInt("cantidad");
                modelo.addRow(fila);
            }

            con.close();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }

    private void actualizarCategorias() {
        //si combo solo tiene Todas, agregar categorias
        try {
            Connection con = conexion.getConexion();
            Statement st = con.createStatement();
            if (JFilterCategory.getItemCount() == 0) {
                ResultSet rs = st.executeQuery("SELECT DISTINCT categoria FROM registro");
                JFilterCategory.addItem("Todas");
                while (rs.next()) {
                    JFilterCategory.addItem(rs.getString("categoria"));
                }
            } else if (JFilterCategory.getItemCount() > 1) {
                JFilterCategory.removeAllItems();
                ResultSet rs = st.executeQuery("SELECT DISTINCT categoria FROM registro");
                JFilterCategory.addItem("Todas");
                while (rs.next()) {
                    JFilterCategory.addItem(rs.getString("categoria"));
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }

    }
}
